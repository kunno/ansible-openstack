[DEFAULT]

#
# From undercloud_config
#

# List of additional architectures enabled in your cloud environment.
# The list of supported values is: ppc64le (list value)
{% if additional_architectures is defined %}
additional_architectures = {{ additional_architectures | join(',') }}
{% else %}
#additional_architectures =
{% endif %}

# The certmonger nickname of the CA from which the certificate will be
# requested. This is used only if the generate_service_certificate
# option is set. Note that if the "local" CA is selected the
# certmonger's local CA certificate will be extracted to /etc/pki/ca-
# trust/source/anchors/cm-local-ca.pem and subsequently added to the
# trust chain. (string value)
{% if certificate_generation_ca is defined %}
certificate_generation_ca = {{ certificate_generation_ca }}
{% else %}
#certificate_generation_ca = local
{% endif %}

# Whether to clean overcloud nodes (wipe the hard drive) between
# deployments and after the introspection. (boolean value)
{% if clean_nodes is defined %}
clean_nodes = {{ clean_nodes }}
{% else %}
#clean_nodes = false
{% endif %}

# Cleanup temporary files. Setting this to False will leave the
# temporary files used during deployment in place after the command is
# run. This is useful for debugging the generated files or if errors
# occur. (boolean value)
{% if cleanup is defined %}
cleanup = {{ cleanup }}
{% else %}
#cleanup = true
{% endif %}

# Container CLI used for deployment; Can be docker or podman. (string
# value)
{% if container_cli is defined %}
container_cli = {{ container_cli }}
{% else %}
#container_cli = podman
{% endif %}

# Whether or not we disable the container healthchecks. (boolean
# value)
{% if container_healthcheck_disabled is defined %}
container_healthcheck_disabled = {{ container_healthcheck_disabled }}
{% else %}
#container_healthcheck_disabled = false
{% endif %}

# REQUIRED if authentication is needed to fetch containers. This file
# should contain values for "ContainerImagePrepare" and
# "ContainerImageRegistryCredentials" that will be used to fetch the
# containers for the undercloud installation. `openstack tripleo
# container image prepare default` can be used to provide a sample
# "ContainerImagePrepare" value. Alternatively this file can contain
# all the required Heat parameters for the containers for advanced
# configurations. (string value)
{% if container_images_file is defined %}
container_images_file = {{ container_images_file }}
{% else %}
#container_images_file =
{% endif %}

# Used to add custom insecure registries for containers. (list value)
# Deprecated group/name - [DEFAULT]/docker_insecure_registries
{% if container_insecure_registries is defined %}
container_insecure_registries = {{ container_insecure_registries | join(',') }}
{% else %}
#container_insecure_registries =
{% endif %}

# An optional container registry mirror that will be used. (string
# value)
# Deprecated group/name - [DEFAULT]/docker_registry_mirror
{% if container_registry_mirror is defined %}
container_registry_mirror = {{ container_registry_mirror }}
{% else %}
#container_registry_mirror =
{% endif %}

# List of any custom environment yaml files to use. These are applied
# after any other configuration and can be used to override any
# derived values. This should be used only by advanced users. (list
# value)
{% if custom_env_files is defined %}
custom_env_files = {{ custom_env_files | join(',') }}
{% else %}
#custom_env_files =
{% endif %}

# User used to run openstack undercloud install command which will be
# used to add the user to the docker group, required to upload
# containers (string value)
{% if deployment_user is defined %}
deployment_user = {{ custom_env_files }}
{% else %}
#deployment_user = <None>
{% endif %}

# The default driver or hardware type to use for newly discovered
# nodes (requires enable_node_discovery set to True). It is
# automatically added to enabled_hardware_types. (string value)
{% if discovery_default_driver is defined %}
discovery_default_driver = {{ discovery_default_driver }}
{% else %}
#discovery_default_driver = ipmi
{% endif %}

# DEPRECATED: Docker bridge IP for the undercloud. (string value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
{% if docker_bip is defined %}
docker_bip = {{ docker_bip }}
{% else %}
#docker_bip = --bip=172.31.0.1/24
{% endif %}

# Whether to install the Volume service. It is not currently used in
# the undercloud. (boolean value)
{% if enable_cinder is defined %}
enable_cinder = {{ enable_cinder }}
{% else %}
#enable_cinder = false
{% endif %}

# Whether to enable the ironic service. (boolean value)
{% if enable_ironic is defined %}
enable_ironic = {{ enable_ironic }}
{% else %}
#enable_ironic = true
{% endif %}

# Whether to enable the ironic inspector service. (boolean value)
{% if enable_ironic_inspector is defined %}
enable_ironic_inspector = {{ enable_ironic_inspector }}
{% else %}
#enable_ironic_inspector = true
{% endif %}

# Whether to enable the mistral service. (boolean value)
{% if enable_mistral is defined %}
enable_mistral = {{ enable_mistral }}
{% else %}
#enable_mistral = true
{% endif %}

# Makes ironic-inspector enroll any unknown node that PXE-boots
# introspection ramdisk in Ironic. By default, the "fake" driver is
# used for new nodes (it is automatically enabled when this option is
# set to True). Set discovery_default_driver to override.
# Introspection rules can also be used to specify driver information
# for newly enrolled nodes. (boolean value)
{% if enable_node_discovery is defined %}
enable_node_discovery = {{ enable_node_discovery }}
{% else %}
#enable_node_discovery = false
{% endif %}

# Whether to enable the nova service. (boolean value)
{% if enable_nova is defined %}
enable_nova = {{ enable_nova }}
{% else %}
#enable_nova = true
{% endif %}

# Whether to install novajoin metadata service in the Undercloud.
# (boolean value)
{% if enable_novajoin is defined %}
enable_novajoin = {{ enable_novajoin }}
{% else %}
#enable_novajoin = false
{% endif %}

# Enable support for routed ctlplane networks. (boolean value)
{% if enable_routed_networks is defined %}
enable_routed_networks = {{ enable_routed_networks }}
{% else %}
#enable_routed_networks = false
{% endif %}

# Whether to enable Swift encryption at-rest or not. (boolean value)
{% if enable_swift_encryption is defined %}
enable_swift_encryption = {{ enable_swift_encryption }}
{% else %}
#enable_swift_encryption = false
{% endif %}

# Whether to install Telemetry services (ceilometer, gnocchi, aodh) in
# the Undercloud. (boolean value)
{% if enable_telemetry is defined %}
enable_telemetry = {{ enable_telemetry }}
{% else %}
#enable_telemetry = false
{% endif %}

# Whether to install Tempest in the Undercloud.This is a no-op for
# containerized undercloud. (boolean value)
{% if enable_tempest is defined %}
enable_tempest = {{ enable_tempest }}
{% else %}
#enable_tempest = true
{% endif %}

# Whether to install requirements to run the TripleO validations.
# (boolean value)
{% if enable_validations is defined %}
enable_validations = {{ enable_validations }}
{% else %}
#enable_validations = true
{% endif %}

# Whether to enable the zaqar service. (boolean value)
{% if enable_zaqar is defined %}
enable_zaqar = {{ enable_zaqar }}
{% else %}
#enable_zaqar = true
{% endif %}

# List of enabled bare metal hardware types (next generation drivers).
# (list value)
{% if enabled_hardware_types is defined %}
enabled_hardware_types = {{ enabled_hardware_types | join(',') }}
{% else %}
#enabled_hardware_types = ipmi,redfish,ilo,idrac
{% endif %}

# When set to True, an SSL certificate will be generated as part of
# the undercloud install and this certificate will be used in place of
# the value for undercloud_service_certificate.  The resulting
# certificate will be written to
# /etc/pki/tls/private/overcloud_endpoint.pem. This certificate is
# signed by CA selected by the "certificate_generation_ca" option.
# (boolean value)
{% if generate_cert is defined %}
generate_service_certificate = {{ generate_cert }}
{% else %}
#generate_service_certificate = true
{% endif %}

# URL for the heat container image to use. (string value)
{% if heat_container_image is defined %}
heat_container_image = {{ heat_container_image }}
{% else %}
#heat_container_image =
{% endif %}

# Execute the heat-all process natively on this host. This option
# requires that the heat-all binaries be installed locally on this
# machine. This option is enabled by default which means heat-all is
# executed on the host OS  directly. (boolean value)
{% if heat_native is defined %}
heat_native = {{ heat_native }}
{% else %}
#heat_native = true
{% endif %}

# Path to hieradata override file. Relative paths get computed inside
# of $HOME. When it points to a heat env file, it is passed in t-h-t
# via "-e <file>", as is. When the file contains legacy instack data,
# it is wrapped with UndercloudExtraConfig and also passed in for
# t-h-t as a temp file created in output_dir. Note, instack hiera data
# may be not t-h-t compatible and will highly likely require a manual
# revision. (string value)
{% if hieradata_override is defined %}
hieradata_override = {{ hieradata_override }}
{% else %}
#hieradata_override =
{% endif %}

# Whether to enable extra hardware collection during the inspection
# process. Requires python-hardware or python-hardware-detect package
# on the introspection image. (boolean value)
{% if inspection_extras is defined %}
inspection_extras = {{ inspection_extras }}
{% else %}
#inspection_extras = true
{% endif %}

# Network interface on which inspection dnsmasq will listen.  If in
# doubt, use the default value. (string value)
# Deprecated group/name - [DEFAULT]/discovery_interface
{% if inspection_interface is defined %}
inspection_interface = {{ inspection_interface | join(',') }}
{% else %}
#inspection_interface = br-ctlplane
{% endif %}

# Whether to run benchmarks when inspecting nodes. Requires
# inspection_extras set to True. (boolean value)
# Deprecated group/name - [DEFAULT]/discovery_runbench
{% if inspection_runbench is defined %}
inspection_runbench = {{ inspection_runbench }}
{% else %}
#inspection_runbench = false
{% endif %}

# One Time Password to register Undercloud node with an IPA server.
# Required when enable_novajoin = True. (string value)
{% if ipa_otp is defined %}
ipa_otp = {{ ipa_otp }}
{% else %}
#ipa_otp =
{% endif %}

# IPv6 address configuration mode for the undercloud provisioning
# network. (string value)
# Possible values:
# dhcpv6-stateless - Address configuration using RA and optional
# information using DHCPv6.
# dhcpv6-stateful - Address configuration and optional information
# using DHCPv6.
{% if ipv6_address_mode is defined %}
ipv6_address_mode = {{ ipv6_address_mode }}
{% else %}
#ipv6_address_mode = dhcpv6-stateless
{% endif %}

# Whether to use iPXE for deploy and inspection. (boolean value)
# Deprecated group/name - [DEFAULT]/ipm_deploy
{% if ipm_enabled is defined %}
ipm_enabled = {{ ipm_enabled }}
{% else %}
#ipm_enabled = true
{% endif %}

# Ironic network interface implementation to use by default. (string
# value)
# Possible values:
# flat - Use one flat provider network.
# neutron - Ironic interacts with Neutron to enable other network
# types and advanced networking features.
{% if ironic_default_network_interface is defined %}
ironic_default_network_interface = {{ ironic_default_network_interface }}
{% else %}
#ironic_default_network_interface = flat
{% endif %}

# Enabled ironic network interface implementations. Each hardware type
# must have at least one valid implementation enabled. (list value)
{% if ironic_enabled_network_interfaces is defined %}
ironic_enabled_network_interfaces = {{ ironic_enabled_interfaces | join(',') }}
{% else %}
#ironic_enabled_network_interfaces = flat
{% endif %}

# Network interface on the Undercloud that will be handling the PXE
# boots and DHCP for Overcloud instances. (string value)
{% if local_interface is defined %}
local_interface = {{ local_interface }}
{% else %}
#local_interface = eth1
{% endif %}

# IP information for the interface on the Undercloud that will be
# handling the PXE boots and DHCP for Overcloud instances.  The IP
# portion of the value will be assigned to the network interface
# defined by local_interface, with the netmask defined by the prefix
# portion of the value. (string value)
{% if local_ip is defined %}
local_ip = {{ local_ip }}
{% else %}
#local_ip = 192.168.24.1/24
{% endif %}

# MTU to use for the local_interface. (integer value)
{% if local_mtu is defined %}
local_mtu = {{ local_mtu }}
{% else %}
#local_mtu = 1500
{% endif %}

# Name of the local subnet, where the PXE boot and DHCP interfaces for
# overcloud instances is located. The IP address of the
# local_ip/local_interface should reside in this subnet. (string
# value)
{% if local_subnet is defined %}
local_subnet = {{ local_subnet }}
{% else %}
#local_subnet = ctlplane-subnet
{% endif %}
#
# Path to network config override template. Relative paths get
# computed inside of $HOME. Must be in the json format. Its content
# overrides anything in t-h-t <role>NetConfigOverride. The processed
# template is then passed in Heat via the generated parameters file
# created in output_dir and used to configure the networking via run-
# os-net-config. If you wish to disable you can set this location to
# an empty file. Templated for instack j2 tags may be used, for
# example:
#
{%- raw %}
# "network_config": [
#  {
#   "type": "ovs_bridge",
#   "name": "br-ctlplane",
#   "ovs_extra": [
#    "br-set-external-id br-ctlplane bridge-id br-ctlplane"
#   ],
#   "members": [
#    {
#     "type": "interface",
#     "name": "{{LOCAL_INTERFACE}}",
#     "primary": "true",
#     "mtu": {{LOCAL_MTU}},
#     "dns_servers": {{UNDERCLOUD_NAMESERVERS}}
#    }
#   ],
#   "addresses": [
#     {
#       "ip_netmask": "{{PUBLIC_INTERFACE_IP}}"
#     }
#   ],
#   "routes": {{SUBNETS_STATIC_ROUTES}},
#   "mtu": {{LOCAL_MTU}}
# }
# ]
{% endraw %}
#   (string value)
{% if net_config_override is defined %}
net_config_override = {{ net_config_override }}
{% else %}
#net_config_override =
{% endif %}

# Networks file to override for heat. May be an absolute path or the
# path relative to the t-h-t templates directory used for deployment
# (string value)
{% if networks_file is defined %}
networks_file = {{ networks_file }}
{% else %}
#networks_file = <None>
{% endif %}

# Directory to output state, processed heat templates, ansible
# deployment files. (string value)
{% if output_dir is defined %}
output_dir = {{ output_dir }}
{% else %}
#output_dir = /builddir
{% endif %}

# DNS domain name to use when deploying the overcloud. The overcloud
# parameter "CloudDomain" must be set to a matching value. (string
# value)
{% if overcloud_domain_name is defined %}
overcloud_domain_name = {{ overcloud_domain_name }}
{% else %}
#overcloud_domain_name = localdomain
{% endif %}

# Roles file to override for heat. May be an absolute path or the path
# relative to the t-h-t templates directory used for deployment
# (string value)
{% if roles_file is defined %}
roles_file = {{ roles_file }}
{% else %}
#roles_file = <None>
{% endif %}

# Maximum number of attempts the scheduler will make when deploying
# the instance. You should keep it greater or equal to the number of
# bare metal nodes you expect to deploy at once to work around
# potential race condition when scheduling. (integer value)
# Minimum value: 1
{% if scheduler_max_attempts is defined %}
scheduler_max_attempts = {{ scheduler_max_attempts }}
{% else %}
#scheduler_max_attempts = 30
{% endif %}

# The kerberos principal for the service that will use the
# certificate. This is only needed if your CA requires a kerberos
# principal. e.g. with FreeIPA. (string value)
{% if service_principal is defined %}
service_principal = {{ service_principal }}
{% else %}
#service_principal =
{% endif %}

# List of routed network subnets for provisioning and introspection.
# Comma separated list of names/tags. For each network a section/group
# needs to be added to the configuration file with these parameters
# set: cidr, dhcp_start, dhcp_end, inspection_iprange, gateway and
# masquerade_network. Note: The section/group must be placed before or
# after any other section. (See the example section [ctlplane-subnet]
# in the sample configuration file.) (list value)
{% if subnets is defined %}
subnets = {{ subnets | join(',') }}
{% else %}
#subnets = ctlplane-subnet
{% endif %}

# heat templates file to override. (string value)
{% if templates is defined %}
templates = {{ templates }}
{% else %}
#templates =
{% endif %}

# Virtual IP or DNS address to use for the admin endpoints of
# Undercloud services. Only used with SSL. (string value)
# Deprecated group/name - [DEFAULT]/undercloud_admin_vip
{% if undercloud_admin_host is defined %}
undercloud_admin_host = {{ undercloud_admin_host }}
{% else %}
#undercloud_admin_host = 192.168.24.3
{% endif %}

# Whether to enable the debug log level for Undercloud OpenStack
# services and Container Image Prepare step. (boolean value)
{% if undercloud_debug is defined %}
undercloud_debug = {{ undercloud_debug }}
{% else %}
#undercloud_debug = true
{% endif %}

# Enable or disable Paunch to manage containers. (boolean value)
{% if undercloud_enable_paunch is defined %}
undercloud_enable_paunch = {{ undercloud_enable_paunch }}
{% else %}
#undercloud_enable_paunch = false
{% endif %}

# Enable or disable SELinux during the deployment. (boolean value)
{% if undercloud_enable_selinux is defined %}
undercloud_enable_selinux = {{ undercloud_enable_selinux }}
{% else %}
#undercloud_enable_selinux = true
{% endif %}

# Fully qualified hostname (including domain) to set on the
# Undercloud. If left unset, the current hostname will be used, but
# the user is responsible for configuring all system hostname settings
# appropriately.  If set, the undercloud install will configure all
# system hostname settings. (string value)
{% if undercloud_hostname is defined %}
undercloud_hostname = {{ undercloud_hostname }}
{% else %}
#undercloud_hostname = <None>
{% endif %}

# The path to a log file to store the undercloud install/upgrade logs.
# (string value)
{% if undercloud_log_file is defined %}
undercloud_log_file = {{ undercloud_log_file }}
{% else %}
#undercloud_log_file = install-undercloud.log
{% endif %}

# DNS nameserver(s). Use for the undercloud node and for the overcloud
# nodes. (NOTE: To use different nameserver(s) for the overcloud,
# override the DnsServers parameter in overcloud environment.) (list
# value)
{% if undercloud_nameservers is defined %}
undercloud_nameservers = {{ undercloud_nameservers | join(',') }}
{% else %}
#undercloud_nameservers =
{% endif %}

# List of ntp servers to use. (list value)
{% if undercloud_ntp_servers is defined %}
undercloud_ntp_server = {{ undercloud_ntp_servers | join(',') }}
{% else %}
#undercloud_ntp_servers = 0.pool.ntp.org,1.pool.ntp.org,2.pool.ntp.org,3.pool.ntp.org
{% endif %}

# Virtual IP or DNS address to use for the public endpoints of
# Undercloud services. Only used with SSL. (string value)
# Deprecated group/name - [DEFAULT]/undercloud_public_vip
{% if undercloud_public_host is defined %}
undercloud_public_host = {{ undercloud_public_host }}
{% else %}
#undercloud_public_host = 192.168.24.2
{% endif %}

# Certificate file to use for OpenStack service SSL connections.
# Setting this enables SSL for the OpenStack API endpoints, leaving it
# unset disables SSL. (string value)
{% if undercloud_service_certificate is defined %}
undercloud_service_certificate = {{ undercloud_service_certificate }}
{% else %}
#undercloud_service_certificate =
{% endif %}

# Host timezone to be used. If no timezone is specified, the existing
# timezone configuration is used. (string value)
{% if undercloud_timezone is defined %}
undercloud_timezone = {{ undercloud_timezone }}
{% else %}
#undercloud_timezone = <None>
{% endif %}

# Whether to update packages during the Undercloud install. This is a
# no-op for containerized undercloud. (boolean value)
{% if undercloud_update_packages is defined %}
undercloud_update_packages = {{ undercloud_update_packages }}
{% else %}
#undercloud_update_packages = false
{% endif %}

# (Experimental) Whether to clean undercloud rpms after an upgrade to
# a containerized undercloud. (boolean value)
{% if upgrade_cleanup is defined %}
upgrade_cleanup = {{ upgrade_cleanup }}
{% else %}
#upgrade_cleanup = false
{% endif %}


[ctlplane-subnet]

#
# From undercloud_config
#

# Network CIDR for the Neutron-managed subnet for Overcloud instances.
# (string value)
# Deprecated group/name - [DEFAULT]/network_cidr
{% if cidr is defined %}
cidr = {{ cidr }}
{% else %}
#cidr = 192.168.24.0/24
{% endif %}

# End of DHCP allocation range for PXE and DHCP of Overcloud instances
# on this network. (list value)
# Deprecated group/name - [DEFAULT]/dhcp_end
{% if dhcp_end is defined %}
dhcp_end = {{ dhcp_end | join(',') }}
{% else %}
#dhcp_end = 192.168.24.24
{% endif %}

# List of IP addresses or IP ranges to exclude from the subnets
# allocation pool. Example: 192.168.24.50,192.168.24.80-192.168.24.90
# (list value)
{% if dhcp_exclude is defined %}
dhcp_exclude = {{ dhcp_exclude | join(',') }}
{% else %}
#dhcp_exclude =
{% endif %}

# Start of DHCP allocation range for PXE and DHCP of Overcloud
# instances on this network. (list value)
# Deprecated group/name - [DEFAULT]/dhcp_start
{% if dhcp_start is defined %}
dhcp_start = {{ dhcp_start | join(',') }}
{% else %}
#dhcp_start = 192.168.24.5
{% endif %}

# DNS nameservers for the Neutron-managed subnet for the Overcloud
# instances on this network. If no nameservers are defined for the
# subnet, the nameservers defined for undercloud_nameservers will be
# used. (list value)
{% if dns_nameservers is defined %}
dns_nameservers = {{ dns_nameservers | join(',') }}
{% else %}
#dns_nameservers =
{% endif %}

# Network gateway for the Neutron-managed network for Overcloud
# instances on this network. (string value)
# Deprecated group/name - [DEFAULT]/network_gateway
{% if gateway is defined %}
gateway = {{ gateway }}
{% else %}
#gateway = 192.168.24.1
{% endif %}

# Host routes for the Neutron-managed subnet for the Overcloud
# instances on this network. The host routes on the local_subnet will
# also be configured on the undercloud. (list value)
#
# This option has a sample default set, which means that
# its actual default value may vary from the one documented
# below.
{% if host_routes is defined %}
host_routes = {{ host_routes | join(',') }}
{% else %}
#host_routes = [{destination: 10.10.10.0/24, nexthop: 192.168.24.1}]
{% endif %}

# Temporary IP range that will be given to nodes on this network
# during the inspection process. Should not overlap with the range
# defined by dhcp_start and dhcp_end, but should be in the same ip
# subnet. (string value)
# Deprecated group/name - [DEFAULT]/inspection_iprange
{% if inspection_iprange is defined %}
inspection_iprange = {{ inspection_iprange | join(',') }}
{% else %}
#inspection_iprange = 192.168.24.100,192.168.24.120
{% endif %}

# The network will be masqueraded for external access. (boolean value)
{% if network_masquerade is defined %}
masquerade = {{ network_masquerade }}
{% else %}
#masquerade = false
{% endif %}
